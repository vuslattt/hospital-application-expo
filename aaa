import React, { useState, useRef } from 'react';
import { View, TouchableOpacity, Text, StyleSheet, Image, Animated, Easing } from 'react-native';
import { FontAwesome } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';

const Altbar = () => {
  const navigation = useNavigation();
  const [menuOpen, setMenuOpen] = useState(false);
  const rotation = useRef(new Animated.Value(0)).current;
  const menuOpacity = useRef(new Animated.Value(0)).current;

  const toggleMenu = () => {
    if (!menuOpen) {
      Animated.parallel([
        Animated.timing(rotation, {
          toValue: 1,
          duration: 300,
          easing: Easing.ease,
          useNativeDriver: true,
        }),
        Animated.timing(menuOpacity, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true,
        }),
      ]).start();
    } else {
      Animated.parallel([
        Animated.timing(rotation, {
          toValue: 0,
          duration: 300,
          easing: Easing.ease,
          useNativeDriver: true,
        }),
        Animated.timing(menuOpacity, {
          toValue: 0,
          duration: 300,
          useNativeDriver: true,
        }),
      ]).start();
    }
    setMenuOpen(!menuOpen);
  };

  const rotateInterpolate = rotation.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '180deg'],
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.menuContainer, { opacity: menuOpacity }]}>
        {[
          { icon: require('../../Assets/name.png'), label: 'Çağrı Merkezi' },
          { icon: require('../../Assets/hakkımızda.png'), label: 'Destek' },
          { icon: require('../../Assets/ayarlar.png'), label: 'Ayarlar' },
          { icon: require('../../Assets/hekimler.png'), label: 'Hekimler' },
        ].map((item, index) => (
          <TouchableOpacity key={index} style={styles.menuItem}>
            <View style={styles.menuIconWrapper}>
              <Image source={item.icon} style={styles.menuIcon} />
            </View>
            <Text style={styles.menuText}>{item.label}</Text>
          </TouchableOpacity>
        ))}
      </Animated.View>

      <TouchableOpacity style={styles.fastAction} onPress={toggleMenu}>
        <Animated.View style={[styles.fastActionCircle, { transform: [{ rotate: rotateInterpolate }] }]}>
          <FontAwesome name="chevron-up" size={24} color="white" />
        </Animated.View>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    position: 'relative',
  },
  menuContainer: {
    position: 'absolute',
    bottom: 80,
    flexDirection: 'row',
    backgroundColor: 'white',
    padding: 10,
    borderRadius: 15,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowOffset: { width: 0, height: 3 },
    shadowRadius: 5,
    elevation: 5,
  },
  menuItem: {
    alignItems: 'center',
    marginHorizontal: 10,
  },
  menuIconWrapper: {
    width: 60,
    height: 60,
    backgroundColor: '#F8FBFF',
    borderRadius: 15,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 4,
  },
  menuIcon: {
    width: 30,
    height: 30,
  },
  menuText: {
    marginTop: 5,
    fontSize: 12,
    color: '#002D72',
    fontWeight: 'bold',
  },
  fastAction: {
    alignItems: 'center',
  },
  fastActionCircle: {
    width: 70,
    height: 70,
    borderRadius: 35,
    backgroundColor: '#002D72',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowOffset: { width: 0, height: 3 },
    shadowRadius: 5,
    elevation: 5,
  },
});

export default Altbar;
